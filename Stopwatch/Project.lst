Microsoft (R) Macro Assembler Version 14.32.31329.0	    05/29/22 01:23:44
main.asm						     Page 1 - 1


				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat, stdcall
main.asm(4) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

				;-------------------------------------------------------------------------------------------------------------------
 00000000			.const
 = 0000001B				ESC_KEY	= 01Bh
 = 00000052				R_KEY	= 052h
 = 00000020				SPACE_KEY = 020h
 = 00000004				BufSize = 4;
 = 00000000				xmin = 0;
 = 00000019				xmax = 25;
 = 00000000				ymin = 0;
 = 0000000F				ymax = 15;
 = 00000008				x1 = 8;
 = 00000006				y1 = 6;
 = 0000000D				x2 = 13;
 = 00000006				y2 = 6;
 = 00000008				x3 = 8;
 = 00000005				y3 = 5;

				;-------------------------------------------------------------------------------------------------------------------
 00000000			.data 
 00000000 20 20 20 20 20		T10 byte  "     _____________          ", 0dh, 0ah, 0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 20 20
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00
 0000001F 20 20 20 20 2F		T11 byte  "    /             \         ", 0dh, 0ah, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5C 20
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00
 0000003E 20 20 20 2F 20		T12 byte  "   /    Select     \        ", 0dh, 0ah, 0
	   20 20 20 53 65
	   6C 65 63 74 20
	   20 20 20 20 5C
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00
 0000005D 20 20 2F 20 20		T13 byte  "  /      mode       \       ", 0dh, 0ah, 0
	   20 20 20 20 6D
	   6F 64 65 20 20
	   20 20 20 20 20
	   5C 20 20 20 20
	   20 20 20 0D 0A
	   00
 0000007C 20 2F 20 20 20		T14 byte  " /                   \      ", 0dh, 0ah, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 20 20 20
	   20 20 20 0D 0A
	   00
 0000009B 20 5C 20 20 20		T15 byte  " \    1: Stopwatch   /      ", 0dh, 0ah, 0
	   20 31 3A 20 53
	   74 6F 70 77 61
	   74 63 68 20 20
	   20 2F 20 20 20
	   20 20 20 0D 0A
	   00
 000000BA 20 20 5C 20 20		T16 byte  "  \    2: Timer     /       ", 0dh, 0ah, 0
	   20 20 32 3A 20
	   54 69 6D 65 72
	   20 20 20 20 20
	   2F 20 20 20 20
	   20 20 20 0D 0A
	   00
 000000D9 20 20 20 5C 20		T17 byte  "   \               /        ", 0dh, 0ah, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2F
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00
 000000F8 20 20 20 20 5C		T18 byte  "    \_____________/         ", 0dh, 0ah, 0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 2F 20
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00

 00000117 20 20 20 20 20		T20 byte  "     _____________          ", 0dh, 0ah, 0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 20 20
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00
 00000136 20 20 20 20 2F		T21 byte  "    /             \         ", 0dh, 0ah, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5C 20
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00
 00000155 20 20 20 2F 20		T22 byte  "   /               \        ", 0dh, 0ah, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 5C
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00
 00000174 20 20 2F 20 20		T23 byte  "  /     SET TIME    \       ", 0dh, 0ah, 0
	   20 20 20 53 45
	   54 20 54 49 4D
	   45 20 20 20 20
	   5C 20 20 20 20
	   20 20 20 0D 0A
	   00
 00000193 20 2F 20 20 6D		T24 byte  " /  minutes seconds  \      ", 0dh, 0ah, 0
	   69 6E 75 74 65
	   73 20 73 65 63
	   6F 6E 64 73 20
	   20 5C 20 20 20
	   20 20 20 0D 0A
	   00
 000001B2 20 5C 20 20 20		T25 byte  " \                   /      ", 0dh, 0ah, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 0D 0A
	   00
 000001D1 20 20 5C 20 20		T26 byte  "  \        :        /       ", 0dh, 0ah, 0
	   20 20 20 20 20
	   20 3A 20 20 20
	   20 20 20 20 20
	   2F 20 20 20 20
	   20 20 20 0D 0A
	   00
 000001F0 20 20 20 5C 20		T27 byte  "   \               /        ", 0dh, 0ah, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2F
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00
 0000020F 20 20 20 20 5C		T28 byte  "    \_____________/         ", 0dh, 0ah, 0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 2F 20
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00
					
 0000022E 20 20 20 20 20		T30 byte  "     _____________          ", 0dh, 0ah, 0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 20 20
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00
 0000024D 20 20 20 20 2F		T31 byte  "    /             \         ", 0dh, 0ah, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5C 20
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00
 0000026C 20 20 20 2F 20		T32 byte  "   /               \        ", 0dh, 0ah, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 5C
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00
 0000028B 20 20 2F 20 6D		T33 byte  "  / minutes seconds \       ", 0dh, 0ah, 0
	   69 6E 75 74 65
	   73 20 73 65 63
	   6F 6E 64 73 20
	   5C 20 20 20 20
	   20 20 20 0D 0A
	   00
 000002AA 20 2F 20 20 20		T34 byte  " /                   \      ", 0dh, 0ah, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 20 20 20
	   20 20 20 0D 0A
	   00
 000002C9 20 5C 20 20 20		T35 byte  " \         :         /      ", 0dh, 0ah, 0
	   20 20 20 20 20
	   20 3A 20 20 20
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 0D 0A
	   00
 000002E8 20 20 5C 20 20		T36 byte  "  \                 /       ", 0dh, 0ah, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2F 20 20 20 20
	   20 20 20 0D 0A
	   00
 00000307 20 20 20 5C 20		T37 byte  "   \               /        ", 0dh, 0ah, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2F
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00
 00000326 20 20 20 20 5C		T38 byte  "    \_____________/         ", 0dh, 0ah, 0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 2F 20
	   20 20 20 20 20
	   20 20 20 0D 0A
	   00


 00000345 20 54 69 6D 65		message byte " Timer ran out! ",0
	   72 20 72 61 6E
	   20 6F 75 74 21
	   20 00
 00000356 0008 0006			cursorPos1 COORD <x1, y1>;
 0000035A 000D 0006			cursorPos2 COORD <x2, y2>;
 0000035E 0008 0005			cursorPos3 COORD <x3, y3>;
 00000362 000D 0005			cursorPos4 COORD <x2, y3>;
 00000366 53 74 6F 70 77		winTitle byte "Stopwatch", 0
	   61 74 63 68 00
 00000370 0000 0000 0019		windowRect SMALL_RECT <xmin, ymin, xmax, ymax>
	   000F
 00000378 00000000			cursorInfo CONSOLE_CURSOR_INFO <>				;// Informacije o kursoru
	   00000000
					
				;-------------------------------------------------------------------------------------------------------------------

 00000000			.data?
				;// Promenljive koje su potrebne za hendlovanje podataka unetih u konzolu tj. interakciju sa korisnikom
 00000000 00000000			stdOutHandle handle ?
 00000004 00000000			stdInHandle handle ? ;// Promenljiva za kontrolu inputa u konzolu
 00000008 00000000			minutes	DWORD ?
 0000000C 00000000			seconds	DWORD ?
 00000010 00				char1	BYTE ?
 00000011 00				char2	BYTE ?
 00000012  00000010 [			temp		BYTE 16 DUP(? )
	    00
	   ]
 00000022 00000000			bRead	DWORD ?
 00000026 00000000			numInp	DWORD ?

				;-------------------------------------------------------------------------------------------------------------------

 00000000			.code
 00000000			main proc

					invoke GetStdHandle, STD_OUTPUT_HANDLE					;// Get output handle
 00000000  6A F5	   *	    push    -00000000Bh
 00000002  E8 00000000 E   *	    call   GetStdHandle
 00000007  A3 00000000 R		mov  stdOutHandle, eax								;// Set handle variable to equal outpt handle
					INVOKE GetStdHandle, STD_INPUT_HANDLE					;// Get input handle
 0000000C  6A F6	   *	    push    -00000000Ah
 0000000E  E8 00000000 E   *	    call   GetStdHandle
 00000013  A3 00000004 R		mov stdInHandle, eax								;// Set handle variable to equal input handle

					invoke GetConsoleCursorInfo, stdOutHandle, addr cursorInfo	;// Get current cursor info
 00000018  68 00000378 R   *	    push   OFFSET cursorInfo
 0000001D  FF 35 00000000 R *	    push   stdOutHandle
 00000023  E8 00000000 E   *	    call   GetConsoleCursorInfo
 00000028  C7 05 0000037C R		mov  cursorInfo.bVisible, 0							;// Configure cursor as invisible
	   00000000
					invoke SetConsoleCursorInfo, stdOutHandle, addr cursorInfo	;// Set new cursor info
 00000032  68 00000378 R   *	    push   OFFSET cursorInfo
 00000037  FF 35 00000000 R *	    push   stdOutHandle
 0000003D  E8 00000000 E   *	    call   SetConsoleCursorInfo

					invoke SetConsoleTitle, addr winTitle					;// Set window title
 00000042  68 00000366 R   *	    push   OFFSET winTitle
 00000047  E8 00000000 E   *	    call   SetConsoleTitleA
					invoke SetConsoleWindowInfo, stdOutHandle, TRUE, addr windowRect	;// Set console size
 0000004C  68 00000370 R   *	    push   OFFSET windowRect
 00000051  6A 01	   *	    push   +000000001h
 00000053  FF 35 00000000 R *	    push   stdOutHandle
 00000059  E8 00000000 E   *	    call   SetConsoleWindowInfo
					
					
 0000005E			start:
 0000005E  E8 00000015			call homeScreen	;// Draw stopwatch

 00000063			startLoop:			;// Wait until one of the options is selected
 00000063  E8 00000000 E		call ReadChar
 00000068  3C 31			cmp	al, '1'		;// Enter stopwatch settings screen
 0000006A  E8 00000129			call	stopWatchProc
 0000006F  3C 32			cmp	al, '2'		;// Enter timer settings screen
 00000071  E8 0000029B			call	timerProc
 00000076  EB EB			jmp	startLoop		;// If nothing is selected, keep looping

 00000078			main endp

				;-------------------------------------------------------------------------------------------------------------------

 00000078			homeScreen PROC; // Draw stopwatch

 00000078  BA 00000000 R		mov edx, offset T10
 0000007D  E8 00000000 E		call WriteString
 00000082  BA 0000001F R		mov edx, offset T11
 00000087  E8 00000000 E		call WriteString
 0000008C  BA 0000003E R		mov edx, offset T12
 00000091  E8 00000000 E		call WriteString
 00000096  BA 0000005D R		mov edx, offset T13
 0000009B  E8 00000000 E		call WriteString
 000000A0  BA 0000007C R		mov edx, offset T14
 000000A5  E8 00000000 E		call WriteString
 000000AA  BA 0000009B R		mov edx, offset T15
 000000AF  E8 00000000 E		call WriteString
 000000B4  BA 000000BA R		mov edx, offset T16
 000000B9  E8 00000000 E		call WriteString
 000000BE  BA 000000D9 R		mov edx, offset T17
 000000C3  E8 00000000 E		call WriteString
 000000C8  BA 000000F8 R		mov edx, offset T18
 000000CD  E8 00000000 E		call WriteString

 000000D2  C3				RET
 000000D3			homeScreen ENDP

 000000D3			timerSettingsScreen PROC; // Draw timer settings screen

 000000D3  BA 00000117 R		mov edx, offset T20
 000000D8  E8 00000000 E		call WriteString
 000000DD  BA 00000136 R		mov edx, offset T21
 000000E2  E8 00000000 E		call WriteString
 000000E7  BA 00000155 R		mov edx, offset T22
 000000EC  E8 00000000 E		call WriteString
 000000F1  BA 00000174 R		mov edx, offset T23
 000000F6  E8 00000000 E		call WriteString
 000000FB  BA 00000193 R		mov edx, offset T24
 00000100  E8 00000000 E		call WriteString
 00000105  BA 000001B2 R		mov edx, offset T25
 0000010A  E8 00000000 E		call WriteString
 0000010F  BA 000001D1 R		mov edx, offset T26
 00000114  E8 00000000 E		call WriteString
 00000119  BA 000001F0 R		mov edx, offset T27
 0000011E  E8 00000000 E		call WriteString
 00000123  BA 0000020F R		mov edx, offset T28
 00000128  E8 00000000 E		call WriteString

 0000012D  C3				RET
 0000012E			timerSettingsScreen ENDP

 0000012E			timerScreen PROC; // Draw timer settings screen

 0000012E  BA 0000022E R		mov edx, offset T30
 00000133  E8 00000000 E		call WriteString
 00000138  BA 0000024D R		mov edx, offset T31
 0000013D  E8 00000000 E		call WriteString
 00000142  BA 0000026C R		mov edx, offset T32
 00000147  E8 00000000 E		call WriteString
 0000014C  BA 0000028B R		mov edx, offset T33
 00000151  E8 00000000 E		call WriteString
 00000156  BA 000002AA R		mov edx, offset T34
 0000015B  E8 00000000 E		call WriteString
 00000160  BA 000002C9 R		mov edx, offset T35
 00000165  E8 00000000 E		call WriteString
 0000016A  BA 000002E8 R		mov edx, offset T36
 0000016F  E8 00000000 E		call WriteString
 00000174  BA 00000307 R		mov edx, offset T37
 00000179  E8 00000000 E		call WriteString
 0000017E  BA 00000326 R		mov edx, offset T38
 00000183  E8 00000000 E		call WriteString

 00000188  C3				RET
 00000189			timerScreen ENDP

 00000189			clearField PROC
 00000189  B0 20			mov al, ' '
 0000018B  E8 00000000 E		call WriteChar
 00000190  B0 20			mov al, ' '
 00000192  E8 00000000 E		call WriteChar

 00000197  C3				RET
 00000198			clearField ENDP

 00000198			stopWatchProc PROC

 00000198			stopwatch : ;// Stopwatch settings screen
 00000198  E8 00000000 E		call Clrscr;// Clear screen
 0000019D  E8 FFFFFF8C			call timerScreen;// Draw timer settings screen
 000001A2			reset:
 000001A2  B8 00000000			mov eax, 0
 000001A7  A3 00000008 R		mov minutes, eax;// Set value of minutes to 0
 000001AC			minutesLoop:
					invoke SetConsoleCursorPosition, stdOutHandle, cursorPos3;// Position cursor beneath minutes label
 000001AC  FF 35 0000035E R *	    push   dword  ptr cursorPos3
 000001B2  FF 35 00000000 R *	    push   stdOutHandle
 000001B8  E8 00000000 E   *	    call   SetConsoleCursorPosition
 000001BD  E8 FFFFFFC7			call clearField
					invoke SetConsoleCursorPosition, stdOutHandle, cursorPos3;// Position cursor beneath minutes label
 000001C2  FF 35 0000035E R *	    push   dword  ptr cursorPos3
 000001C8  FF 35 00000000 R *	    push   stdOutHandle
 000001CE  E8 00000000 E   *	    call   SetConsoleCursorPosition
 000001D3  A1 00000008 R		mov eax, minutes
 000001D8  E8 00000000 E		call WriteDec;// Write minutes value to the screen
 000001DD  B8 00000000			mov eax, 0
 000001E2  A3 0000000C R		mov seconds, eax;// Set values of seconds to 0
 000001E7			secondsLoop:
					;// Check if any button was pressed
					invoke GetNumberOfConsoleInputEvents, stdInHandle, addr numInp
 000001E7  68 00000026 R   *	    push   OFFSET numInp
 000001EC  FF 35 00000004 R *	    push   stdInHandle
 000001F2  E8 00000000 E   *	    call   GetNumberOfConsoleInputEvents
 000001F7  A1 00000026 R		mov eax, numInp
 000001FC  83 F8 00			cmp eax, 0;// Check if input buffer is empty
 000001FF  0F 84 000000A0		je cont
					invoke ReadConsoleInput, stdInHandle, addr temp, 1, addr bRead
 00000205  68 00000022 R   *	    push   OFFSET bRead
 0000020A  6A 01	   *	    push   +000000001h
 0000020C  68 00000012 R   *	    push   OFFSET temp
 00000211  FF 35 00000004 R *	    push   stdInHandle
 00000217  E8 00000000 E   *	    call   ReadConsoleInputA
 0000021C  66| 8B 15			mov dx, word PTR temp;// Check event type
	   00000012 R
 00000223  66| 83 FA 01			cmp dx, 1;// if true keep going
 00000227  75 7C			jne cont
 00000229  8A 15 00000016 R		mov dl, byte PTR[temp + 4];// If only button release is detected
 0000022F  80 FA 00			cmp dl, 0;// discard and continue
 00000232  74 71			je cont
 00000234  8A 15 0000001C R		mov dl, byte PTR[temp + 10];// Check which button is pressed
 0000023A  80 FA 1B			cmp dl, ESC_KEY;// if ESC stop timer and exit program
 0000023D  0F 84 000000C6		je quit
 00000243  80 FA 52			cmp dl, R_KEY;// If R is pressed, reset stopwatch and go to homescreen
 00000246  0F 84 FFFFFF56		je reset
 0000024C  80 FA 20			cmp dl, SPACE_KEY;// If space key is pressed, pause the timer
 0000024F  75 54			jne cont;// until space is pressed again
 00000251			hold:
					;// Check if any button is pressed
					invoke GetNumberOfConsoleInputEvents, stdInHandle, addr numInp
 00000251  68 00000026 R   *	    push   OFFSET numInp
 00000256  FF 35 00000004 R *	    push   stdInHandle
 0000025C  E8 00000000 E   *	    call   GetNumberOfConsoleInputEvents
 00000261  A1 00000026 R		mov eax, numInp
 00000266  83 F8 00			cmp eax, 0;// Check if input buffer is empty
 00000269  74 E6			je hold
					invoke ReadConsoleInput, stdInHandle, addr temp, 1, addr bRead
 0000026B  68 00000022 R   *	    push   OFFSET bRead
 00000270  6A 01	   *	    push   +000000001h
 00000272  68 00000012 R   *	    push   OFFSET temp
 00000277  FF 35 00000004 R *	    push   stdInHandle
 0000027D  E8 00000000 E   *	    call   ReadConsoleInputA
 00000282  66| 8B 15			mov dx, word PTR temp;// Check event type
	   00000012 R
 00000289  66| 83 FA 01			cmp dx, 1;// if true keep looping
 0000028D  75 C2			jne hold
 0000028F  8A 15 00000016 R		mov dl, byte PTR[temp + 4];// If only button release is detected
 00000295  80 FA 00			cmp dl, 0;// discard and continue
 00000298  74 B7			je hold
 0000029A  8A 15 0000001C R		mov dl, byte PTR[temp + 10];// Check which button is pressed
 000002A0  80 FA 20			cmp dl, SPACE_KEY;// if SPACE key is pressed, continue program
 000002A3  75 AC			jne hold;// Else keep looping
 000002A5			cont:
					invoke SetConsoleCursorPosition, stdOutHandle, cursorPos4;// Position cursor beneath seconds label
 000002A5  FF 35 00000362 R *	    push   dword  ptr cursorPos4
 000002AB  FF 35 00000000 R *	    push   stdOutHandle
 000002B1  E8 00000000 E   *	    call   SetConsoleCursorPosition
 000002B6  E8 FFFFFECE			call clearField;// Clear seconds field
					invoke SetConsoleCursorPosition, stdOutHandle, cursorPos4;// Position cursor beneath seconds label
 000002BB  FF 35 00000362 R *	    push   dword  ptr cursorPos4
 000002C1  FF 35 00000000 R *	    push   stdOutHandle
 000002C7  E8 00000000 E   *	    call   SetConsoleCursorPosition
 000002CC  A1 0000000C R		mov eax, seconds;// Write seconds value to the screen
 000002D1  E8 00000000 E		call WriteDec
 000002D6  A1 0000000C R		mov eax, seconds
 000002DB  40				inc eax
 000002DC  A3 0000000C R		mov seconds, eax
 000002E1  B8 000003E8			mov eax, 1000
 000002E6  E8 00000000 E		call Delay
 000002EB  A1 0000000C R		mov eax, seconds
 000002F0  83 F8 3C			cmp eax, 60
 000002F3  0F 85 FFFFFEEE		jne secondsLoop
 000002F9  A1 00000008 R		mov eax, minutes
 000002FE  40				inc eax
 000002FF  A3 00000008 R		mov minutes, eax
 00000304  E9 FFFFFEA3			jmp minutesLoop
 00000309			quit:
					EXIT
 00000309  6A 00	   *	    push   +000000000h
 0000030B  E8 00000000 E   *	    call   ExitProcess

 00000310  C3				RET
 00000311			stopWatchProc ENDP

 00000311			timerProc PROC
 00000311			timer : ;// Timer settings screen
					invoke GetConsoleCursorInfo, stdOutHandle, addr cursorInfo;// Get current cursor info
 00000311  68 00000378 R   *	    push   OFFSET cursorInfo
 00000316  FF 35 00000000 R *	    push   stdOutHandle
 0000031C  E8 00000000 E   *	    call   GetConsoleCursorInfo
 00000321  C7 05 0000037C R		mov	cursorInfo.bVisible, 1;// Configure cursor as visible
	   00000001
					invoke SetConsoleCursorInfo, stdOutHandle, addr cursorInfo;// Set new cursor info
 0000032B  68 00000378 R   *	    push   OFFSET cursorInfo
 00000330  FF 35 00000000 R *	    push   stdOutHandle
 00000336  E8 00000000 E   *	    call   SetConsoleCursorInfo
 0000033B  E8 00000000 E	min:	call Clrscr;// Clear screen
 00000340  E8 FFFFFD8E			call timerSettingsScreen;// Draw timer settings screen
					invoke SetConsoleCursorPosition, stdOutHandle, cursorPos1;// Position cursor beneath minutes label
 00000345  FF 35 00000356 R *	    push   dword  ptr cursorPos1
 0000034B  FF 35 00000000 R *	    push   stdOutHandle
 00000351  E8 00000000 E   *	    call   SetConsoleCursorPosition
 00000356  E8 00000000 E		call ReadDec;// Read minutes input
 0000035B  BB 0000003C			mov ebx, 60
 00000360  3B C3			cmp eax, ebx;// Check if input is less than 60 minutes
 00000362  79 D7			jns	min;// If not, jump back to input
 00000364  A3 00000008 R		mov minutes, eax;// Store in minutes variable
					invoke SetConsoleCursorPosition, stdOutHandle, cursorPos2;// Position cursor beneath seconds label
 00000369  FF 35 0000035A R *	    push   dword  ptr cursorPos2
 0000036F  FF 35 00000000 R *	    push   stdOutHandle
 00000375  E8 00000000 E   *	    call   SetConsoleCursorPosition
 0000037A  E8 00000000 E		call ReadDec;// Read seconds input
 0000037F  A3 0000000C R		mov seconds, eax;// Store in seconds variable
					invoke GetConsoleCursorInfo, stdOutHandle, addr cursorInfo;// Get current cursor info
 00000384  68 00000378 R   *	    push   OFFSET cursorInfo
 00000389  FF 35 00000000 R *	    push   stdOutHandle
 0000038F  E8 00000000 E   *	    call   GetConsoleCursorInfo
 00000394  C7 05 0000037C R		mov	cursorInfo.bVisible, 0;// Configure cursor as invisible
	   00000000
					invoke SetConsoleCursorInfo, stdOutHandle, addr cursorInfo;// Set new cursor info
 0000039E  68 00000378 R   *	    push   OFFSET cursorInfo
 000003A3  FF 35 00000000 R *	    push   stdOutHandle
 000003A9  E8 00000000 E   *	    call   SetConsoleCursorInfo
				;//----------------Draw timer-------------------------------------------------------------------------------
 000003AE  E8 00000000 E		call Clrscr;// Clear screen
 000003B3  E8 FFFFFD76			call timerScreen;// Draw timer graphic 
					invoke SetConsoleCursorPosition, stdOutHandle, cursorPos4;// Position cursor beneath seconds label
 000003B8  FF 35 00000362 R *	    push   dword  ptr cursorPos4
 000003BE  FF 35 00000000 R *	    push   stdOutHandle
 000003C4  E8 00000000 E   *	    call   SetConsoleCursorPosition
 000003C9  A1 0000000C R		mov eax, seconds;// Write seconds value to the screen
 000003CE  E8 00000000 E		call WriteDec
 000003D3					minloop :
					invoke SetConsoleCursorPosition, stdOutHandle, cursorPos3;// Position cursor beneath minutes label
 000003D3  FF 35 0000035E R *	    push   dword  ptr cursorPos3
 000003D9  FF 35 00000000 R *	    push   stdOutHandle
 000003DF  E8 00000000 E   *	    call   SetConsoleCursorPosition
 000003E4  E8 FFFFFDA0			call	clearField;// Clear minute field
					invoke SetConsoleCursorPosition, stdOutHandle, cursorPos3;// Position cursor beneath minutes label
 000003E9  FF 35 0000035E R *	    push   dword  ptr cursorPos3
 000003EF  FF 35 00000000 R *	    push   stdOutHandle
 000003F5  E8 00000000 E   *	    call   SetConsoleCursorPosition
 000003FA  A1 00000008 R		mov	eax, minutes;// Write minutes value to the screen
 000003FF  E8 00000000 E		call WriteDec
 00000404					timerloop :
 00000404  8B 0D 0000000C R		mov ecx, seconds;// Decrement seconds variable
 0000040A  49				dec ecx
 0000040B  89 0D 0000000C R		mov seconds, ecx
					invoke SetConsoleCursorPosition, stdOutHandle, cursorPos4;// Position cursor beneath seconds label
 00000411  FF 35 00000362 R *	    push   dword  ptr cursorPos4
 00000417  FF 35 00000000 R *	    push   stdOutHandle
 0000041D  E8 00000000 E   *	    call   SetConsoleCursorPosition
 00000422  E8 FFFFFD62			call clearField;// Clear seconds field
					invoke SetConsoleCursorPosition, stdOutHandle, cursorPos4;// Position cursor beneath seconds label
 00000427  FF 35 00000362 R *	    push   dword  ptr cursorPos4
 0000042D  FF 35 00000000 R *	    push   stdOutHandle
 00000433  E8 00000000 E   *	    call   SetConsoleCursorPosition
 00000438  A1 0000000C R		mov eax, seconds;// Write seconds value to the screen
 0000043D  E8 00000000 E		call WriteDec
 00000442  B8 000003E8			mov eax, 1000;// Delay 1s, not the best since all other operations 
 00000447  E8 00000000 E		call Delay;// also take some time but close enough 
 0000044C  A1 0000000C R		mov eax, seconds
 00000451  83 F8 00			cmp eax, 0;// If we haven't reached 0 seconds keep looping
 00000454  75 AE			jne timerloop
 00000456  A1 00000008 R		mov eax, minutes;// Check if 0 minutes reached
 0000045B  83 F8 00			cmp eax, 0
 0000045E  74 15			je exitlabel
 00000460  48				dec eax;// If not 0 minutes, decrement minutes variable
 00000461  A3 00000008 R		mov minutes, eax
 00000466  B8 0000003C			mov eax, 60;// Update seconds variable to 60
 0000046B  A3 0000000C R		mov seconds, eax
 00000470  E9 FFFFFF5E			jmp minloop;// Jump to write minutes value to the screen
 00000475			exitlabel:
					;// Pop-up
 00000475  BA 00000345 R		mov edx, offset message
 0000047A  BB 00000000			mov ebx, 0
 0000047F  E8 00000000 E		call MsgBox

 00000484  C3				RET
 00000485			timerProc ENDP


				end main
Microsoft (R) Macro Assembler Version 14.32.31329.0	    05/29/22 01:23:44
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CONST  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'CONST'	 ReadOnly
FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_BSS . . . . . . . . . . . . . .	32 Bit	 0000002A Para	  Public  'BSS'  
_DATA  . . . . . . . . . . . . .	32 Bit	 00000380 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000485 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
clearField . . . . . . . . . . .	P Near	 00000189 _TEXT	Length= 0000000F Public STDCALL
homeScreen . . . . . . . . . . .	P Near	 00000078 _TEXT	Length= 0000005B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000078 Public STDCALL
  start  . . . . . . . . . . . .	L Near	 0000005E _TEXT	
  startLoop  . . . . . . . . . .	L Near	 00000063 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
stopWatchProc  . . . . . . . . .	P Near	 00000198 _TEXT	Length= 00000179 Public STDCALL
  stopwatch  . . . . . . . . . .	L Near	 00000198 _TEXT	
  reset  . . . . . . . . . . . .	L Near	 000001A2 _TEXT	
  minutesLoop  . . . . . . . . .	L Near	 000001AC _TEXT	
  secondsLoop  . . . . . . . . .	L Near	 000001E7 _TEXT	
  hold . . . . . . . . . . . . .	L Near	 00000251 _TEXT	
  cont . . . . . . . . . . . . .	L Near	 000002A5 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000309 _TEXT	
timerProc  . . . . . . . . . . .	P Near	 00000311 _TEXT	Length= 00000174 Public STDCALL
  timer  . . . . . . . . . . . .	L Near	 00000311 _TEXT	
  min  . . . . . . . . . . . . .	L Near	 0000033B _TEXT	
  minloop  . . . . . . . . . . .	L Near	 000003D3 _TEXT	
  timerloop  . . . . . . . . . .	L Near	 00000404 _TEXT	
  exitlabel  . . . . . . . . . .	L Near	 00000475 _TEXT	
timerScreen  . . . . . . . . . .	P Near	 0000012E _TEXT	Length= 0000005B Public STDCALL
timerSettingsScreen  . . . . . .	P Near	 000000D3 _TEXT	Length= 0000005B Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BufSize  . . . . . . . . . . . .	Number	 00000004h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
ESC_KEY  . . . . . . . . . . . .	Number	 0000001Bh   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
R_KEY  . . . . . . . . . . . . .	Number	 00000052h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SPACE_KEY  . . . . . . . . . . .	Number	 00000020h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
T10  . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
T11  . . . . . . . . . . . . . .	Byte	 0000001F _DATA	
T12  . . . . . . . . . . . . . .	Byte	 0000003E _DATA	
T13  . . . . . . . . . . . . . .	Byte	 0000005D _DATA	
T14  . . . . . . . . . . . . . .	Byte	 0000007C _DATA	
T15  . . . . . . . . . . . . . .	Byte	 0000009B _DATA	
T16  . . . . . . . . . . . . . .	Byte	 000000BA _DATA	
T17  . . . . . . . . . . . . . .	Byte	 000000D9 _DATA	
T18  . . . . . . . . . . . . . .	Byte	 000000F8 _DATA	
T20  . . . . . . . . . . . . . .	Byte	 00000117 _DATA	
T21  . . . . . . . . . . . . . .	Byte	 00000136 _DATA	
T22  . . . . . . . . . . . . . .	Byte	 00000155 _DATA	
T23  . . . . . . . . . . . . . .	Byte	 00000174 _DATA	
T24  . . . . . . . . . . . . . .	Byte	 00000193 _DATA	
T25  . . . . . . . . . . . . . .	Byte	 000001B2 _DATA	
T26  . . . . . . . . . . . . . .	Byte	 000001D1 _DATA	
T27  . . . . . . . . . . . . . .	Byte	 000001F0 _DATA	
T28  . . . . . . . . . . . . . .	Byte	 0000020F _DATA	
T30  . . . . . . . . . . . . . .	Byte	 0000022E _DATA	
T31  . . . . . . . . . . . . . .	Byte	 0000024D _DATA	
T32  . . . . . . . . . . . . . .	Byte	 0000026C _DATA	
T33  . . . . . . . . . . . . . .	Byte	 0000028B _DATA	
T34  . . . . . . . . . . . . . .	Byte	 000002AA _DATA	
T35  . . . . . . . . . . . . . .	Byte	 000002C9 _DATA	
T36  . . . . . . . . . . . . . .	Byte	 000002E8 _DATA	
T37  . . . . . . . . . . . . . .	Byte	 00000307 _DATA	
T38  . . . . . . . . . . . . . .	Byte	 00000326 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
bRead  . . . . . . . . . . . . .	DWord	 00000022 _BSS	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
char1  . . . . . . . . . . . . .	Byte	 00000010 _BSS	
char2  . . . . . . . . . . . . .	Byte	 00000011 _BSS	
cursorInfo . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000378 _DATA	
cursorPos1 . . . . . . . . . . .	COORD	 00000356 _DATA	
cursorPos2 . . . . . . . . . . .	COORD	 0000035A _DATA	
cursorPos3 . . . . . . . . . . .	COORD	 0000035E _DATA	
cursorPos4 . . . . . . . . . . .	COORD	 00000362 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
message  . . . . . . . . . . . .	Byte	 00000345 _DATA	
minutes  . . . . . . . . . . . .	DWord	 00000008 _BSS	
numInp . . . . . . . . . . . . .	DWord	 00000026 _BSS	
red  . . . . . . . . . . . . . .	Number	 00000004h   
seconds  . . . . . . . . . . . .	DWord	 0000000C _BSS	
stdInHandle  . . . . . . . . . .	DWord	 00000004 _BSS	
stdOutHandle . . . . . . . . . .	DWord	 00000000 _BSS	
temp . . . . . . . . . . . . . .	Byte	 00000012 _BSS	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winTitle . . . . . . . . . . . .	Byte	 00000366 _DATA	
windowRect . . . . . . . . . . .	SMALL_RECT  00000370 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
x1 . . . . . . . . . . . . . . .	Number	 00000008h   
x2 . . . . . . . . . . . . . . .	Number	 0000000Dh   
x3 . . . . . . . . . . . . . . .	Number	 00000008h   
xmax . . . . . . . . . . . . . .	Number	 00000019h   
xmin . . . . . . . . . . . . . .	Number	 00000000h   
y1 . . . . . . . . . . . . . . .	Number	 00000006h   
y2 . . . . . . . . . . . . . . .	Number	 00000006h   
y3 . . . . . . . . . . . . . . .	Number	 00000005h   
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
ymax . . . . . . . . . . . . . .	Number	 0000000Fh   
ymin . . . . . . . . . . . . . .	Number	 00000000h   

	   1 Warnings
	   0 Errors
